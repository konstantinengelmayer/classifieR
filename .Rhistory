stack <- rast(stack)
plot(stack)
# Function to plot in batches
plot_in_batches <- function(raster_stack, batch_size = 4) {
total_layers <- nlyr(raster_stack)
batch_count <- ceiling(total_layers / batch_size)
for (i in 1:batch_count) {
start_layer <- (i - 1) * batch_size + 1
end_layer <- min(i * batch_size, total_layers)
layers_to_plot <- raster_stack[[start_layer:end_layer]]
# Set up the plotting area
par(mfrow = c(ceiling(sqrt(end_layer - start_layer + 1)), ceiling(sqrt(end_layer - start_layer + 1))))
# Plot the layers in the current batch
plot(layers_to_plot, main = paste("Layers", start_layer, "to", end_layer))
}
# Reset the plotting area to default
par(mfrow = c(1, 1))
}
# Plot the result stack in batches
plot_in_batches(result_stack)
# Plot the result stack in batches
plot_in_batches(stack)
stack
stack <- calculate_indices(red = test$rgb_2020_1, blue = test$rgb_2020_2,
nir = test$cir, green = test$rgb_2020_3,
indices = c("NDVI", "EVI", "SAVI", "GCI", "OSAVI", "MSAVI", "TVI",
"DVI", "RVI", "IPVI", "GNDVI", "VARI", "TGI", "NDRE", "CIgreen",
"CIrededge", "ARVI", "MTVI", "NDWI", "NDSI", "BSI", "NBRI", "IBI"))
stack
# Function to plot in batches
plot_in_batches <- function(raster_stack, batch_size = 4) {
total_layers <- nlyr(raster_stack)
batch_count <- ceiling(total_layers / batch_size)
for (i in 1:batch_count) {
start_layer <- (i - 1) * batch_size + 1
end_layer <- min(i * batch_size, total_layers)
layers_to_plot <- raster_stack[[start_layer:end_layer]]
# Set up the plotting area
par(mfrow = c(ceiling(sqrt(end_layer - start_layer + 1)), ceiling(sqrt(end_layer - start_layer + 1))))
# Plot the layers in the current batch
plot(layers_to_plot, main = paste("Layers", start_layer, "to", end_layer))
}
# Reset the plotting area to default
par(mfrow = c(1, 1))
}
# Plot the result stack in batches
plot_in_batches(stack)
stack
#' @param blue SpatRaster representing the Blue channel.
#' @param nir SpatRaster representing the Near-Infrared channel.
#' @param indices Character vector specifying which indices to calculate.
#'                Options include "NDVI", "EVI", "SAVI", "GCI", "OSAVI", "MSAVI", "TVI",
#'                "DVI", "RVI", "IPVI", "GNDVI", "VARI", "TGI", "NDRE", "CIgreen",
#'                "CIrededge", "ARVI", "MTVI", "NDWI", "NDSI", "BSI", "NBRI", "IBI".
#' @param output_dir Character string specifying the directory to save the output indices as .tif files.
#'                   If NULL, the function returns a SpatRaster stack.
#' @return A SpatRaster containing the calculated indices if output_dir is NULL, otherwise NULL.
#' @export
calculate_indices <- function(red, green, blue, nir, indices, output_dir = NULL) {
# List of valid indices
valid_indices <- c("NDVI", "EVI", "SAVI", "GCI", "OSAVI", "MSAVI", "TVI",
"DVI", "RVI", "IPVI", "GNDVI", "VARI", "TGI", "NDRE",
"CIgreen", "CIrededge", "ARVI", "MTVI", "NDWI", "NDSI",
"BSI", "NBRI", "IBI")
# Check if all specified indices are valid
if (!all(indices %in% valid_indices)) {
invalid_indices <- indices[!indices %in% valid_indices]
stop("Invalid indices specified: ", paste(invalid_indices, collapse = ", "))
}
results <- list()
total_indices <- length(indices)
count <- 0
if ("NDVI" %in% indices) {
message("Calculating NDVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$NDVI <- (nir - red) / (nir + red)
names(results$NDVI) <- "NDVI"
}
if ("EVI" %in% indices) {
message("Calculating EVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$EVI <- 2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 1)
names(results$EVI) <- "EVI"
}
if ("SAVI" %in% indices) {
message("Calculating SAVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
L <- 0.5
results$SAVI <- (nir - red) * (1 + L) / (nir + red + L)
names(results$SAVI) <- "SAVI"
}
if ("GCI" %in% indices) {
message("Calculating GCI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$GCI <- nir / green - 1
names(results$GCI) <- "GCI"
}
if ("OSAVI" %in% indices) {
message("Calculating OSAVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$OSAVI <- (nir - red) / (nir + red + 0.16)
names(results$OSAVI) <- "OSAVI"
}
if ("MSAVI" %in% indices) {
message("Calculating MSAVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$MSAVI <- (2 * nir + 1 - sqrt((2 * nir + 1)^2 - 8 * (nir - red))) / 2
names(results$MSAVI) <- "MSAVI"
}
if ("TVI" %in% indices) {
message("Calculating TVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$TVI <- sqrt((nir - red) / (nir + red) + 0.5)
names(results$TVI) <- "TVI"
}
if ("DVI" %in% indices) {
message("Calculating DVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$DVI <- nir - red
names(results$DVI) <- "DVI"
}
if ("RVI" %in% indices) {
message("Calculating RVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$RVI <- nir / red
names(results$RVI) <- "RVI"
}
if ("IPVI" %in% indices) {
message("Calculating IPVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$IPVI <- nir / (nir + red)
names(results$IPVI) <- "IPVI"
}
if ("GNDVI" %in% indices) {
message("Calculating GNDVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$GNDVI <- (nir - green) / (nir + green)
names(results$GNDVI) <- "GNDVI"
}
if ("VARI" %in% indices) {
message("Calculating VARI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$VARI <- (green - red) / (green + red - blue)
names(results$VARI) <- "VARI"
}
if ("TGI" %in% indices) {
message("Calculating TGI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$TGI <- -0.5 * ((190 * (red - green)) - (120 * (red - blue)))
names(results$TGI) <- "TGI"
}
if ("NDRE" %in% indices) {
message("Calculating NDRE... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$NDRE <- (nir - red) / (nir + red)
names(results$NDRE) <- "NDRE"
}
if ("CIgreen" %in% indices) {
message("Calculating CIgreen... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$CIgreen <- nir / green - 1
names(results$CIgreen) <- "CIgreen"
}
if ("CIrededge" %in% indices) {
message("Calculating CIrededge... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$CIrededge <- nir / red - 1
names(results$CIrededge) <- "CIrededge"
}
if ("ARVI" %in% indices) {
message("Calculating ARVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$ARVI <- (nir - (2 * red - blue)) / (nir + (2 * red + blue))
names(results$ARVI) <- "ARVI"
}
if ("MTVI" %in% indices) {
message("Calculating MTVI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$MTVI <- 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) / sqrt((2 * nir + 1)^2 - (6 * nir - 5 * sqrt(red)) - 0.5)
names(results$MTVI) <- "MTVI"
}
if ("NDWI" %in% indices) {
message("Calculating NDWI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$NDWI <- (green - nir) / (green + nir)
names(results$NDWI) <- "NDWI"
}
if ("NDSI" %in% indices) {
message("Calculating NDSI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$NDSI <- (green - nir) / (green + nir)
names(results$NDSI) <- "NDSI"
}
if ("BSI" %in% indices) {
message("Calculating BSI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$BSI <- (red + nir - (blue + green)) / (red + nir + (blue + green))
names(results$BSI) <- "BSI"
}
if ("NBRI" %in% indices) {
message("Calculating NBRI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$NBRI <- (nir - red) / (nir + red)
names(results$NBRI) <- "NBRI"
}
if ("IBI" %in% indices) {
message("Calculating IBI... ", count <- count + 1, "/", total_indices, " indices calculated.")
results$IBI <- (2 * green - (nir + blue)) / (nir + blue)
names(results$IBI) <- "IBI"
}
message(count, "/", total_indices, " indices calculated.")
if (!is.null(output_dir)) {
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
for (name in names(results)) {
message("Saving ", name, " to file...")
writeRaster(results[[name]], filename = file.path(output_dir, paste0(name, ".tif")), overwrite = TRUE)
}
return(NULL)
} else {
# Convert list to SpatRaster
result_stack <- rast(results)
return(result_stack)
}
}
test <- rast("C:/Users/konst/Documents/Master/bip/berchtes_gaden/data/data_lev1/rgb_cir_stack_2020.tif")
# Define a smaller extent for cropping (xmin, xmax, ymin, ymax)
small_extent <- ext(790500, 791000, 5276000, 5277000)
# Crop the raster stack to the smaller extent
test <- crop(test, small_extent)
stack <- calculate_indices(red = test$rgb_2020_1, blue = test$rgb_2020_2,
nir = test$cir, green = test$rgb_2020_3,
indices = c("NDVI", "test","EVI", "SAVI", "GCI", "OSAVI", "MSAVI", "TVI",
"DVI", "RVI", "IPVI", "GNDVI", "VARI", "TGI", "NDRE", "CIgreen",
"CIrededge", "ARVI", "MTVI", "NDWI", "NDSI", "BSI", "NBRI", "IBI"))
test <- rast("C:/Users/konst/Documents/Master/bip/berchtes_gaden/data/data_lev1/rgb_cir_stack_2020.tif")
# Define a smaller extent for cropping (xmin, xmax, ymin, ymax)
small_extent <- ext(790500, 791000, 5276000, 5277000)
# Crop the raster stack to the smaller extent
test <- crop(test, small_extent)
writeRaster(test, "tests/testthat/rgb_cir_stack_2020.tif")
install.packages(testthat)
install.packages("testthat")
roxygenise("")
roxygenise("classifieR")
roxygenise("")
library(roxygen2)
roxygenise("")
roxygenise("")
roxygenise("C:/Users/konst/Documents/Master/classifieR")
roxygenise("C:/Users/konst/Documents/Master/classifieR")
# Load the test raster stack
test <- rast(system.file("testthat", "rgb_cir_stack_2020.tif", package = "classifieR"))
# Load the test raster stack
test <- rast(system.file("testthat", "rgb_cir_stack_2020.tif", package = "classifieR"))
system.file("testthat", "rgb_cir_stack_2020.tif", package = "classifieR")
# Load the test raster stack
test <- rast(system.file("tests", "rgb_cir_stack_2020.tif", package = "classifieR"))
system.file("tests", "rgb_cir_stack_2020.tif", package = "classifieR")
# Load the test raster stack
test <- rast(system.file("testthat", "rgb_cir_stack_2020.tif", package = "classifieR"))
system.file("testthat", "rgb_cir_stack_2020.tif", package = "classifieR")
system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR")
# Load the test raster stack
test <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR"))
library(classifieR)
library(shiny)
library(terra)
library(sf)
library(randomForest)
install.packages("randomForest")
library(randomForest)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
crs(test)
test
# Load the test raster stack
test <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR"))
crs(test)
runApp('inst/shiny')
gc()
runApp('inst/shiny')
runApp('inst/shiny')
# Paths to the input files
tif_path <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR")) # replace with your file path
shp_path <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
library(sf)
shp_path <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
system.file("extdata", "training.gpkg", package = "classifieR")
shp_path <- read_sf(system.file("inst", "training.gpkg", package = "classifieR")) # replace with your file path
shp_path <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
shp_path <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
# Paths to the input files
tif_path <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR")) # replace with your file path
# Paths to the input files
tif <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR")) # replace with your file path
shp <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
shp <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
# Paths to the input files
tif <- rast(system.file("extdata", "rgb_cir_stack_2020.tif", package = "classifieR")) # replace with your file path
shp <- read_sf(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
# Select indices to calculate
selected_indices <- c("NDVI", "SAVI")
# Calculate indices
indices_stack <- calculate_indices(tif$rgb_2020_1, tif$rgb_2020_2,
tif$rgb_2020_3, tif$cir, selected_indices)
print(indices_stack)
shp <- st_read(system.file("extdata", "training.gpkg", package = "classifieR")) # replace with your file path
system.file("extdata", "training.gpkg", package = "classifieR")
shp <- st_read("C:/Users/konst/Documents/Master/classifieR/inst/extdata/training.gpkg") # replace with your file path
View(shp)
# Select indices to calculate
selected_indices <- c("NDVI", "SAVI")
# Calculate indices
indices_stack <- calculate_indices(tif$rgb_2020_1, tif$rgb_2020_2,
tif$rgb_2020_3, tif$cir, selected_indices)
training_sites <- st_read("C:/Users/konst/Documents/Master/classifieR/inst/extdata/training.gpkg") # replace with your file path
# Select indices to calculate
selected_indices <- c("NDVI", "SAVI")
# Extract training data
training_data <- extract(indices_stack, training_sites)
# Train Random Forest model
rf_model <- randomForest(training_data[,-1], as.factor(training_data[,1]))
as.factor(training_data[,1])
training_data[,-1]
View(training_data)
training_data <- na.omit(training_data)
View(training_data)
# Train Random Forest model
rf_model <- randomForest(training_data[,-1], as.factor(training_data[,1]))
print(rf_model)
# Perform validation (e.g., using cross-validation or test data)
# This is a placeholder for actual validation code
validation_results <- "Validation results here"
print(validation_results)
View(rf_model)
plot(indices_stack)
shiny::runApp('inst/shiny')
source("~/Master/classifieR/R/runApp.R")
appDir <- system.file("shiny",package = "classifieR")
runApp()
source("~/Master/classifieR/inst/shiny/app.R")
library(shiny)
library(terra)
library(sf)
library(caret)
library(CAST)
library(mapview)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel("Image Classification for Users"),
sidebarLayout(
sidebarPanel(
# Preprocessing section
h3("Preprocessing"),
fileInput("shpFile", "Choose Shapefile or Geopackage", accept = c(".shp", ".gpkg")),
fileInput("tifFile", "Choose .tif File", accept = c(".tif")),
uiOutput("layerSelector"),
uiOutput("redChannel"),
uiOutput("greenChannel"),
uiOutput("blueChannel"),
uiOutput("nirChannel"),
actionButton("plotLayer", "Plot Selected Layer"),
checkboxGroupInput("indices", "Select Indices",
choices = c("NDVI", "EVI", "SAVI", "GCI", "OSAVI", "MSAVI", "TVI",
"DVI", "RVI", "IPVI", "GNDVI", "VARI", "TGI", "NDRE", "CIgreen",
"CIrededge", "ARVI", "MTVI", "NDWI", "NDSI", "BSI", "NBRI", "IBI")),
actionButton("calculateIndices", "Calculate Indices"),
# Classification section
h3("Classification"),
uiOutput("predictors"),
uiOutput("response"),
actionButton("trainModel", "Train Model"),
# Postclassification section
h3("Postclassification"),
actionButton("validateModel", "Validate Model"),
actionButton("calculateAoA", "Calculate Area of Applicability")
),
mainPanel(
# Outputs for each section
h3("Outputs"),
mapviewOutput("mapView"),
verbatimTextOutput("preprocessOutput"),
verbatimTextOutput("classificationOutput"),
verbatimTextOutput("postclassificationOutput"),
plotOutput("varImpPlot")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Increase the maximum file upload size to 500 MB
options(shiny.maxRequestSize = 500 * 1024^2)
# Reactive value to store the indices stack and caret model
reactive_vals <- reactiveValues(indices_stack = NULL, caret_model = NULL)
observe({
req(input$tifFile)
# Load the input tif file
tif_path <- input$tifFile$datapath
tif <- rast(tif_path)
# Get layer names
layer_names <- names(tif)
# Update the dropdown menu for layer selection
output$layerSelector <- renderUI({
selectInput("layerSelector", "Select Layer to Plot", choices = layer_names)
})
output$redChannel <- renderUI({
selectInput("redChannel", "Red Channel", choices = layer_names)
})
output$greenChannel <- renderUI({
selectInput("greenChannel", "Green Channel", choices = layer_names)
})
output$blueChannel <- renderUI({
selectInput("blueChannel", "Blue Channel", choices = layer_names)
})
output$nirChannel <- renderUI({
selectInput("nirChannel", "NIR Channel", choices = layer_names)
})
})
observeEvent(input$plotLayer, {
req(input$tifFile, input$layerSelector)
# Load the input tif file
tif_path <- input$tifFile$datapath
tif <- rast(tif_path)
layer <- tif[[input$layerSelector]]
# Plot the selected layer with mapview
output$mapView <- renderMapview({
mapview(layer)
})
})
observeEvent(input$calculateIndices, {
req(input$tifFile, input$indices, input$redChannel, input$greenChannel, input$blueChannel, input$nirChannel)
# Load the input tif file
tif_path <- input$tifFile$datapath
tif <- rast(tif_path)
# Assign the correct channels
red <- tif[[input$redChannel]]
green <- tif[[input$greenChannel]]
blue <- tif[[input$blueChannel]]
nir <- tif[[input$nirChannel]]
# Calculate indices
indices_stack <- calculate_indices(red, green, blue, nir, input$indices)
reactive_vals$indices_stack <- indices_stack
output$preprocessOutput <- renderPrint({
print(indices_stack)
})
})
observeEvent(input$trainModel, {
req(input$tifFile, input$shpFile, reactive_vals$indices_stack)
# Load the training sites shapefile or geopackage
shp_path <- input$shpFile$datapath
if (grepl(".shp$", shp_path)) {
training_sites <- st_read(shp_path)
} else if (grepl(".gpkg$", shp_path)) {
training_sites <- st_read(shp_path)
}
# Extract training data
training_data <- extract(reactive_vals$indices_stack, training_sites)
training_data <- na.omit(training_data)  # Remove rows with NA values
# Update UI for predictor and response variable selection
output$predictors <- renderUI({
selectInput("predictors", "Select Predictors", choices = names(training_data), selected = names(training_data)[-1], multiple = TRUE)
})
output$response <- renderUI({
selectInput("response", "Select Response Variable", choices = names(training_data), selected = names(training_data)[1])
})
observeEvent(input$trainModel, {
req(input$predictors, input$response)
# Define predictor variables and response variable
x <- training_data[, input$predictors]
y <- training_data[[input$response]]
# Train model using caret with ffs()
train_control <- trainControl(method = "cv", number = 5)
ffs_model <- ffs(x, y, method = "rf", trControl = train_control)
reactive_vals$caret_model <- ffs_model
output$classificationOutput <- renderPrint({
print(ffs_model)
})
output$varImpPlot <- renderPlot({
varImpPlot(ffs_model)
})
})
})
observeEvent(input$validateModel, {
req(reactive_vals$caret_model)
# Perform validation
validation_results <- reactive_vals$caret_model$results
output$postclassificationOutput <- renderPrint({
print(validation_results)
})
})
observeEvent(input$calculateAoA, {
req(reactive_vals$caret_model)
# Placeholder for actual AoA calculation code
aoa_results <- "Area of Applicability results here"
output$postclassificationOutput <- renderPrint({
print(aoa_results)
})
})
}
source("~/Master/classifieR/inst/shiny/app.R")
runApp('inst/shiny')
runApp('inst/shiny')
devtools::load_all(".")
runApp('inst/shiny')
devtools::load_all(".")
runApp('inst/shiny')
devtools::load_all(".")
runApp('inst/shiny')
devtools::load_all(".")
runApp('inst/shiny')
devtools::load_all(".")
runApp('inst/shiny')
devtools::load_all(".")
